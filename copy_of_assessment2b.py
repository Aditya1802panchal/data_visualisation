# -*- coding: utf-8 -*-
"""Copy of Assessment2B.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19y7ceVDHiRjshO0L3YUi2AjNarRv7QuO

###### Assessment

###### I am going to provide two .csv files , you are supposed to work on them and have to provide solutions to the following problems

###### import necessary libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""###### merge those two csv files (after getting as dataframes, get them as a single dataframe)"""

df1=pd.read_csv("college_1.csv")
df2=pd.read_csv("college_2.csv")

data=pd.concat(map(pd.read_csv,["college_1.csv","college_2.csv"]),ignore_index=True)



"""###### Take each csv file , split that csv file into multiple categories (example csv files are added in the repo) 

"""

data.to_csv("data.csv")

"""###### consider if the codekata score exceeds 15000 points(present week) then make a csv on those observations as Exceeded expectations.csv

"""

score=data[data["CodeKata Score"]>15000]
score.to_csv("Exceeded_expectations.csv")

"""###### if  10000<codekata score<15000   (Reached_expectations.csv)


"""

reachedscore=data[(data["CodeKata Score"]>10000) & (data["CodeKata Score"]<15000)]
reachedscore.to_csv("Reached_expectations.csv")

"""###### if  7000<codekata score<10000   (Needs_Improvement.csv)

"""

Improvementscore=data[(data["CodeKata Score"]>7000) & (data["CodeKata Score"]<10000)]
Improvementscore.to_csv("Needs_Improvement.csv")

"""###### if  codekate score < 7000        (Unsatisfactory.csv)"""

Unsatisfactoryscore=data[data["CodeKata Score"]<7000]
Unsatisfactoryscore.to_csv("Unsatisfactory.csv")



"""###### Average of previous week geekions vs this week geekions (i.e Previous Geekions vs CodeKata Score)"""

x=data["Previous Geekions"].mean()
y=data["CodeKata Score"].mean()

a=[x,y]

b=["Previous Geekions","CodeKata Score"]
lab=["Avg.prevoius.GK","Avg.current.GK"]
plt.bar(b,a,fc="#12e80c",ec="k")

plt.xticks(b,lab)
plt.title("Average of previous week geekions vs this week geekions")

"""###### No of students participated """

active=data[data["Rising"]!=0]
print("NO OF STUDENTS PARTICIPATED CODEKATA IN THIS WEEK:",len(active))
print("NO OF STUDENTS PARTICIPATED IN PROGRAM:",len(data))

"""###### #Average completion of python course or my_sql or python english or computational thinking"""

# only python and mysql are present in two datasets. so calculated their avg from merged file of two collage 
python_avg=data["python"].mean()
mysql_avg=data["mysql"].mean()
#PYTHON ENGLISH & COMPUTATIONAL THINKING ARE PRESENT OLY IN COLLAGE 2 DATA SET. SO I CALCULATE AVERAGE BASED ON THAT FILE!
df2=pd.read_csv("college_2.csv")
python_en_avg=df2["python_en"].mean()
com_think_avg=df2["computational_thinking"].mean()
print("THE AVERAGE COMPETION OF MYSQL IS :","{:.1f}".format(mysql_avg))
print("THE AVERAGE COMPETION OF PYTHON IS :","{:.1f}".format(python_avg))
print("THE AVERAGE COMPETION OF PYTHON_EN IS :","{:.1f}".format(python_en_avg))
print("THE AVERAGE COMPETION OF COMPUTATIONAL_THINKING IS :","{:.1f}".format(com_think_avg))

"""###### rising star of the week (top 3 candidate who performed well in that particular week)"""

rising=data.sort_values("Rising",ascending=False,ignore_index=True)
rising.index+=1
print(rising["Name"].head(3))

"""###### Shining stars of the week (top 3 candidates who has highest geekions)"""

shining=data.sort_values("CodeKata Score",ascending=False)
shining.index+=1
print(shining["Name"].head(3))

"""###### Department wise codekata performence (pie chart)"""

import plotly.express as px
fig=px.pie(data,names=["Computer Science and Engineering","Electronics and Communication Engineering","Electronics and Electrical Engineering "],values=(data.groupby("Department")["CodeKata Score"]).mean(),title="DEPARTMENT WISE CODEKATA PERFORMANCE")
fig.show()

"""###### Department wise toppers (horizantal bar graph or any visual representations of your choice)"""

def CSian(row):
  if row["Department"]=="Computer Science and Engineering":
    return row["CodeKata Score"]
data["CSian"]=data.apply(CSian,axis=1)

def EEEian(row):
  if row["Department"]=="Electronics and Electrical Engineering":
    return row["CodeKata Score"]
data["EEEian"]=data.apply(EEEian,axis=1)

def ECEian(row):
  if row["Department"]=="Electronics and Communication Engineering":
    return row["CodeKata Score"]
data["ECEian"]=data.apply(ECEian,axis=1)

cse_topper=data.sort_values("CSian",ascending=False,ignore_index=True).head(3)
#to display result from index "1" increased the value of index to "1" from default "0"
cse_topper.index +=1
print(cse_topper["Name"])

eee_topper=data.sort_values("EEEian",ascending=False,ignore_index=True).head(3)
eee_topper.index +=1
print(eee_topper["Name"])

ece_topper=data.sort_values("ECEian",ascending=False,ignore_index=True).head(3)
ece_topper.index +=1
print(ece_topper["Name"])

plt.figure(figsize=(20,10),dpi=200)
plt.subplot(3,3,1)
plt.barh(eee_topper["Name"],eee_topper["CodeKata Score"],fc="#37f1cc",ec="k")
plt.xlabel("CODEKATA_SCORE")
plt.title("TOPPERS OF ELECTRONICS & ELECTRICAL ENGINEERING!")
plt.xlabel("CODEKATA_SCORE")
##########
plt.subplot(3,3,2)
plt.barh(ece_topper["Name"],ece_topper["CodeKata Score"],fc="#ff1b00",ec="k")
plt.xlabel("CODEKATA_SCORE")
plt.title("TOPPERS OF ELECTRONICS & COMMUNICATION ENGINEERING!")
###########
plt.subplot(3,3,3)
plt.barh(cse_topper["Name"],cse_topper["CodeKata Score"],fc="#9701dc",ec="k")
plt.xlabel("CODEKATA_SCORE")
plt.title("TOPPERS OF COMPUTER SCIENCE AND ENGINEERING!")
plt.tight_layout()
plt.legend()
plt.show()

